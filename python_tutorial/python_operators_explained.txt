PYTHON OPERATORS EXPLAINED
==========================

ARITHMETIC OPERATORS
--------------------
These operators perform mathematical operations on numeric values.

+   Addition: 5 + 3 = 8
-   Subtraction: 10 - 4 = 6
*   Multiplication: 3 * 4 = 12
/   Division (float): 10 / 3 = 3.3333333333333335
//  Floor Division: 10 // 3 = 3 (rounds down to nearest integer)
%   Modulus (remainder): 10 % 3 = 1
**  Exponentiation: 2 ** 3 = 8

Examples:
```python
a = 15
b = 4

print(a + b)   # 19
print(a - b)   # 11
print(a * b)   # 60
print(a / b)   # 3.75
print(a // b)  # 3
print(a % b)   # 3
print(a ** b)  # 50625
```

LOGICAL OPERATORS
-----------------
These operators work with boolean values (True/False) and perform logical operations.

and  Logical AND: Returns True if both conditions are True
or   Logical OR: Returns True if at least one condition is True
not  Logical NOT: Returns the opposite boolean value

Examples:
```python
x = True
y = False

print(x and y)  # False
print(x or y)   # True
print(not x)    # False
print(not y)    # True
```

COMPARISON WITH JAVASCRIPT OPERATORS
------------------------------------

PYTHON vs JAVASCRIPT LOGICAL OPERATORS:

Python: and, or, not
JavaScript: &&, ||, !

Key Differences:

1. **Syntax Difference**:
   - Python: `if x > 0 and y > 0:`
   - JavaScript: `if (x > 0 && y > 0) `

2. **Return Values**:
   - Python: Returns the actual value (not just True/False)
   - JavaScript: Returns boolean True/False

Python Examples:
```python
# Python returns the actual value
result1 = 5 and 3      # Returns 3 (last truthy value)
result2 = 0 and 5      # Returns 0 (first falsy value)
result3 = 5 or 3       # Returns 5 (first truthy value)
result4 = 0 or 5       # Returns 5 (first truthy value)
```

JavaScript Examples:
```python
// JavaScript returns boolean
result1 = 5 && 3       // Returns true
result2 = 0 && 5       // Returns false
result3 = 5 || 3       // Returns true
result4 = 0 || 5       // Returns true
```

TRUTHY AND FALSY VALUES
-----------------------

Python Falsy Values:
- None
- False
- 0 (integer)
- 0.0 (float)
- '' (empty string)
- [] (empty list)
- {} (empty dict)
- set() (empty set)

JavaScript Falsy Values:
- false
- 0
- '' (empty string)
- null
- undefined
- NaN

PRACTICAL EXAMPLES
------------------

Python Examples:
```python
# Checking multiple conditions
age = 25
has_license = True
can_drive = age >= 18 and has_license
print(can_drive)  # True

# Using or for defaults
name = "" or "Guest"
print(name)  # "Guest"

# Complex conditions
score = 85
is_passing = score >= 60 and score <= 100
print(is_passing)  # True

# Chaining conditions
x = 10
result = 5 < x < 15  # Python allows chaining!
print(result)  # True
```

JavaScript Equivalent:
```javascript
// Checking multiple conditions
let age = 25;
let hasLicense = true;
let canDrive = age >= 18 && hasLicense;
console.log(canDrive);  // true

// Using || for defaults
let name = "" || "Guest";
console.log(name);  // "Guest"

// Complex conditions
let score = 85;
let isPassing = score >= 60 && score <= 100;
console.log(isPassing);  // true
```

SHORT-CIRCUIT EVALUATION
------------------------

Both Python and JavaScript use short-circuit evaluation:

- **and/&&**: Stops at first falsy value
- **or/||**: Stops at first truthy value

Python Example:
```python
def expensive_function():
    print("This won't be called")
    return True

# Short-circuit prevents expensive_function from being called
result = False and expensive_function()  # Returns False, expensive_function not called
```

JavaScript Example:
```javascript
function expensiveFunction() {
    console.log("This won't be called");
    return true;
}

// Short-circuit prevents expensiveFunction from being called
let result = false && expensiveFunction();  // Returns false, expensiveFunction not called
```

COMMON MISTAKES TO AVOID
------------------------

1. **Using & and | instead of and/or**:
   - `&` and `|` are bitwise operators in Python
   - Use `and` and `or` for logical operations

2. **Confusing = with ==**:
   - `=` is assignment
   - `==` is comparison

3. **Forgetting parentheses in complex conditions**:
   ```python
   # Wrong
   if x > 0 and y > 0 or z > 0:
   
   # Better (explicit)
   if (x > 0 and y > 0) or z > 0:
   ```

SUMMARY TABLE
-------------

| Operation | Python | JavaScript | Returns |
|-----------|---------|------------|---------|
| AND       | and     | &&         | Python: actual value, JS: boolean |
| OR        | or      | ||         | Python: actual value, JS: boolean |
| NOT       | not     | !          | Both: boolean |
| Equal     | ==      | ==         | Both: boolean |
| Not equal | !=      | !=         | Both: boolean |
